{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "myCluster",
      "minLength": 1,
      "maxLength": 61,
      "metadata": {
        "description": "Name to use for this cluster. This name is shown in MATLAB as the cluster profile name."
      }
    },
    "numWorkerNodes": {
      "type": "Int",
      "defaultValue": 2,
      "minValue": 0,
      "maxValue": 1000,
      "metadata": {
        "description": "Number of Azure virtual machines to start for the workers to run on."
      }
    },
    "minWorkerNodes": {
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Minimum number of running Azure virtual machines."
      }
    },
    "maxWorkerNodes": {
      "defaultValue": 4,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Maximum number of running Azure virtual machines."
      }
    },
    "numWorkersPerNode": {
      "type": "Int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Number of MATLAB worker processes to start on each virtual machine (VM). Specify 1 worker for every 2 vCPUs so that each physical core has 1 worker. For example, a Standard_D64s_v3 VM has 64 vCPUs, so it can support 32 MATLAB workers. See https://learn.microsoft.com/azure/virtual-machines/sizes for details on vCPUs for each VM size."
      }
    },
    "headNodeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v3",
      "metadata": {
        "description": "Azure virtual machine (VM) size to use for the head node, which runs the job manager. No workers are started on this node, so this node can be a smaller VM type than the worker nodes. By default, the heap memory for the job manager is set between 1024 MiB and a maximum of half of the VM memory, depending on the total number of MATLAB workers. See https://learn.microsoft.com/azure/virtual-machines/sizes for a list of VMs."
      }
    },
    "workerVmSize": {
      "type": "string",
      "defaultValue": "Standard_F4s_v2",
      "metadata": {
        "description": "Azure virtual machine (VM) size to use for the workers. By default, the heap memory for all worker process is set between 1024 MiB and a maximum of a quarter of the VM memory, depending on the number of MATLAB workers on the VM. See https://learn.microsoft.com/azure/virtual-machines/sizes for a list of VMs."
      }
    },
    "useSpotInstancesForWorkerNodes": {
      "defaultValue": "No",
      "type": "string",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Option indicating whether to enable Azure Spot Virtual Machines for worker nodes. For more information, refer to the FAQ section in the deployment README."
      }
    },
    "databaseVolumeSize": {
      "type": "Int",
      "defaultValue": 100,
      "minValue": 0,
      "maxValue": 1023,
      "metadata": {
        "description": "Size in GB of the volume to store the database files. All job and task information, including input and output data, is stored on this volume and so it must have enough capacity to store the expected amount of data. If set to 0, no volume is created and the root volume of the VM is used for the database."
      }
    },
    "clientIPAddress": {
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "IP address range that can be used to access the cluster from MATLAB. This range must be a valid IP CIDR range of the form x.x.x.x/x. Use the value &lt;your_public_ip_address&gt;/32 to restrict access to only your computer."
      }
    },
    "adminUsername": {
      "type": "String",
      "defaultValue": "matlab",
      "metadata": {
        "description": "Admin username for the cluster. To avoid deployment errors, conform to the list of [Disallowed Values (Microsoft)](https://learn.microsoft.com/rest/api/compute/virtual-machines/create-or-update?tabs=HTTP#osprofile) for adminUsername."
      }
    },
    "adminPassword": {
      "type": "SecureString",
      "metadata": {
        "description": "Choose the password for the admin user of the cluster. This password and the chosen admin username are required to log in into any VM in the cluster using RDP or SSH. For the deployment to succeed, your password must meet Azure's password requirements. See [Password requirements when creating a VM](https://learn.microsoft.com/azure/virtual-machines/windows/faq?WT.mc_id=Portal-fx#what-are-the-password-requirements-when-creating-a-vm-) for information on the password requirements."
      }
    },
    "virtualNetworkResourceID": {
      "type": "string",
      "metadata": {
        "description": "Resource ID of an existing virtual network to deploy your cluster into. You can find ID this under the properties of your virtual network."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of an existing subnet within your virtual network to deploy your cluster into."
      }
    },
    "licenseServer": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "License manager for MATLAB, specified as a string in the form port@hostname. If not specified, online licensing is used. Otherwise, license manager must be accessible from the specified virtual network and subnets. For more information, see https://github.com/mathworks-ref-arch/license-manager-for-matlab-on-azure."
      }
    },
    "MJSSecurityLevel": {
      "metadata": {
        "description": "Security level for the cluster. Level 0: Any user can access any jobs and tasks. Level 1: Accessing other users' jobs and tasks issues a warning. However, all users can still perform all actions. Level 2: Users must enter a password to access their jobs and tasks. The job owner can grant access to other users."
      },
      "type": "String",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0"
    },
    "enableAutoscaling": {
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "type": "String",
      "metadata": {
        "description": "Option indicating whether VM autoscaling is enabled. For more information about autoscaling, refer to the 'Use Autoscaling' section in the deployment README."
      }
    },
    "automaticallyTerminateCluster": {
      "defaultValue": "Never",
      "allowedValues": [
        "Disable auto-termination",
        "Never",
        "When cluster is idle",
        "After 1 hour",
        "After 2 hours",
        "After 3 hours",
        "After 4 hours",
        "After 5 hours",
        "After 6 hours",
        "After 7 hours",
        "After 8 hours",
        "After 9 hours",
        "After 10 hours",
        "After 11 hours",
        "After 12 hours",
        "After 13 hours",
        "After 14 hours",
        "After 15 hours",
        "After 16 hours",
        "After 17 hours",
        "After 18 hours",
        "After 19 hours",
        "After 20 hours",
        "After 21 hours",
        "After 22 hours",
        "After 23 hours",
        "After 24 hours"
      ],
      "type": "String",
      "metadata": {
        "description": "Option to autoterminate the cluster after a few hours or when idle. When the cluster is terminated, all worker nodes are deleted and the headnode is deallocated. Select 'Never' to disable auto-termination now but you can enable it later. Select 'Disable auto-termination' to fully disable this feature or if you do not have the permissions to create and assign roles in your subscription. For more information, see [Automatically terminate the MATLAB Parallel Server cluster](https://github.com/mathworks-ref-arch/matlab-parallel-server-on-azure-lin#automatically-terminate-the-matlab-parallel-server-cluster)."
      }
    },
    "MJSSchedulingAlgorithm": {
      "metadata": {
        "description": "Scheduling algorithm for the job manager. 'standard' spreads communicating jobs across as few worker machines as possible to reduce communication overheads and fills in unused spaces on worker machines with independent jobs. Suitable for good behavior for a wide range of uses including autoscaling. 'loadBalancing' distributes load evenly across the cluster to give as many resources as possible to running jobs and tasks when the cluster is underutilized."
      },
      "type": "String",
      "allowedValues": [
        "standard",
        "loadBalancing"
      ],
      "defaultValue": "standard"
    },
    "optionalUserCommand": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "Provide an optional inline PowerShell command to run on machine launch. For example, to set an environment variable CLOUD=AZURE, use this command excluding the angle brackets: &lt;[System.Environment]::SetEnvironmentVariable(\"CLOUD\",\"AZURE\", \"Machine\");&gt;. You can use either double quotes or two single quotes. To run an external script, use this command excluding the angle brackets: &lt;Invoke-WebRequest \"https://www.example.com/script.ps1\" -OutFile script.ps1; .\\script.ps1&gt;. Find the logs at 'C:\\ProgramData\\MathWorks\\startup.log'."
      }
    },
    "imageID": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Optional Resource ID of a custom managed image in the target region. To use a prebuilt MathWorks image instead, leave this field empty. If you customize the build, for example by removing or modifying the included scripts, this can make the image incompatible with the provided ARM template. To ensure compatibility, modify the ARM template or image accordingly."
      }
    }
  },
  "variables": {
    "fixedPrefix": "mjs",
    "windowsVMNameLengthLimit": 15,
    "windowsVMSSNameLengthLimit": 9,
    "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
    "namingPrefix": "[concat(variables('fixedPrefix'), '-', variables('resourceGroupUniqueString'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "newOrExistingVirtualNetwork": "Existing",
    "virtualNetworkCreateName": "[concat(variables('namingPrefix'), '-vnet')]",
    "subnetCreateName": "[concat(variables('namingPrefix'), '-subnet')]",
    "virtualNetworkName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),last(split(parameters('virtualNetworkResourceID'),'/')),variables('virtualNetworkCreateName'))]",
    "subnetName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),parameters('subnetName'),variables('subnetCreateName'))]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "subnet": "[if(equals(variables('newOrExistingVirtualNetwork'),'New'),variables('subnetRef'),concat(parameters('virtualNetworkResourceID'), '/subnets/', parameters('subnetName')))]",
    "cuaTrackingNum": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
    "headnodeMachineName": "[concat(take(variables('fixedPrefix'), sub(variables('windowsVMNameLengthLimit'), length('-headnode'))), '-headnode')]",
    "vmssName": "[concat(take(variables('fixedPrefix'), sub(variables('windowsVMSSNameLengthLimit'), length('-vmss'))), '-vmss')]",
    "publisher": "mathworks-inc",
    "offer": "matlab-parallel-server-ref-arch-vm-win-offer",
    "sku": "matlab-parallel-server-ref-arch-r2025a-vm-win-sku",
    "version": "20251.0.422415",
    "imageResourceID": {
      "id": "[parameters('imageID')]"
    },
    "defaultImageReference": {
      "publisher": "[variables('publisher')]",
      "offer": "[variables('offer')]",
      "sku": "[variables('sku')]",
      "version": "[variables('version')]"
    },
    "imageReference": "[if(empty(parameters('imageId')), variables('defaultImageReference'), variables('imageResourceID'))]",
    "plan": {
      "name": "[variables('sku')]",
      "publisher": "[variables('publisher')]",
      "product": "[variables('offer')]"
    },
    "osDisk": {
      "createOption": "fromImage",
      "managedDisk": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "storageProfileWithoutDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]"
    },
    "storageProfileWithDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]",
      "dataDisks": [
        {
          "name": "[concat(variables('headnodeMachineName'), '-database')]",
          "diskSizeGB": "[parameters('databaseVolumeSize')]",
          "lun": 0,
          "createOption": "Empty",
          "caching": "None"
        }
      ]
    },
    "publicIPPostfix": "pub",
    "headnodeIPName": "[concat(variables('namingPrefix'), variables('publicIPPostfix'))]",
    "dnsLabelPrefix": "[concat('azure-', variables('resourceGroupUniqueString'))]",
    "publicIpTimeout": "20",
    "networkInterfacePostfix": "nic",
    "publicIpConfigPostfix": "ipConfig",
    "networkSecurityGroupName": "[concat(variables('namingPrefix'), '-nsg')]",
    "totalPorts": "[add(7, mul(4, parameters('numWorkersPerNode')))]",
    "startPort": 27350,
    "finalPort": "[add(variables('startPort'), variables('totalPorts'))]",
    "storageAccountName": "[concat('mwstorage', variables('resourceGroupUniqueString'))]",
    "storageAccountType": "Standard_LRS",
    "userDataScript": [
      "# Copyright 2023-2024 The MathWorks, Inc.",
      "",
      "Start-Transcript -Path $Env:ProgramData\\MathWorks\\startup.log -Append",
      "$StartupFolder = \"$Env:ProgramFiles\\MathWorks\\startup\"",
      "# Load startup variables",
      ". $StartupFolder\\env.ps1",
      "",
      "# Define startup parameters",
      "[concat('$Env:JobManagerName=\"', parameters('clusterName'), '\"')]",
      "[concat('$Env:WorkersPerNode=\"', parameters('numWorkersPerNode'), '\"')]",
      "[concat('$Env:MLMLicenseFile=\"', parameters('licenseServer'), '\"')]",
      "[concat('$Env:SecurityLevel=\"', parameters('MJSSecurityLevel'), '\"')]",
      "[concat('$Env:SchedulingAlgorithm=\"', parameters('MJSSchedulingAlgorithm'), '\"')]",
      "[concat('$Env:AZURE_STORAGE_ACCOUNT=\"', variables('storageAccountName'), '\"')]",
      "{{NODE_SPECIFIC_PARAMETERS}}",
      "[concat('$Env:OptionalUserCommand=', '''', base64(parameters('optionalUserCommand')), '''')]",
      "",
      "# Decode and execute the optional user command",
      "if ([string]::IsNullOrWhiteSpace(\"$Env:OptionalUserCommand\")) {",
      "    Write-Output \"No optional user command was passed.\"",
      "} else {",
      "    Write-Output \"Decoding and executing the optional user command...\"",
      "    $DecodedCommand = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($Env:OptionalUserCommand))",
      "    Write-Output \"Decoded Command: $DecodedCommand\"",
      "    Invoke-Expression $DecodedCommand",
      "}",
      "",
      "# Run startup scripts",
      "Get-ChildItem $StartupFolder | Where-Object { $_ -match '^[0-9]+_.+$' } | Sort-Object | ForEach-Object { Write-Output \"Startup: executing $_\"; $executionTime = Measure-Command { & $_.FullName }; Write-Output \"Execution time for $($_.Name): $($executionTime.TotalSeconds) seconds\" }",
      "Stop-Transcript"
    ],
    "terminationPolicy": "[if(equals(parameters('automaticallyTerminateCluster'), 'When cluster is idle'), 'on_idle', if(equals(parameters('automaticallyTerminateCluster'),'Never'),'never',parameters('automaticallyTerminateCluster')))]",
    "startupParametersHeadnode": [
      "$Env:NodeType='headnode'",
      "[concat('$Env:EnableAutoscaling=\"', parameters('enableAutoscaling'), '\"')]",
      "[concat('$Env:MaxNodes=', parameters('maxWorkerNodes'))]",
      "[concat('$Env:DesiredCapacity=', parameters('numWorkerNodes'))]",
      "[concat('$Env:TerminationPolicy=\"', variables('terminationPolicy'), '\"')]"
    ],
    "startupParametersWorker": [
      "$Env:NodeType='worker'",
      "[concat('$Env:USE_SPOT_INSTANCE=\"', parameters('UseSpotInstancesForWorkerNodes'), '\"')]"
    ],
    "roleDeploymentCondition": "[or(not(equals(parameters('enableAutoscaling'), 'No')), not(equals(parameters('automaticallyTerminateCluster'), 'Disable auto-termination')))]",
    "vmssManagementPermissions": [
      "Microsoft.Compute/virtualMachineScaleSets/read",
      "Microsoft.Compute/virtualMachineScaleSets/write",
      "Microsoft.Compute/virtualMachineScaleSets/delete/action",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/write",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/delete"
    ],
    "headnodeManagementPermissions": [
      "Microsoft.Resources/tags/write",
      "Microsoft.Compute/virtualMachines/read",
      "Microsoft.Compute/virtualMachines/deallocate/action"
    ],
    "clusterManagerRoleName": "[guid(resourceGroup().id, 'cluster-management-role')]",
    "privateIPAddressForNodes": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
    "tagsForAll": {
      "provider": "[variables('cuaTrackingNum')]"
    },
    "tagsForVMSS": {
      "mwMinCount": "[parameters('minWorkerNodes')]",
      "mwDesiredCount": "[parameters('numWorkerNodes')]",
      "mwMaxCount": "[parameters('maxWorkerNodes')]",
      "mwWorkersPerNode": "[parameters('numWorkersPerNode')]",
      "mwWorkerIdleTimeoutMinutes": 10
    }
  },
  "resources": [
    {
      "condition": "[equals(variables('newOrExistingVirtualNetwork'),'New')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-01-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetCreateName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-01-01",
      "name": "[variables('headnodeIPName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('headnodeMachineName'), variables('dnsLabelPrefix'))]"
        },
        "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-01-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "22",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "default-allow-rdp",
            "properties": {
              "priority": 1010,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "3389",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "mathworks-job-scheduler-inbound",
            "properties": {
              "priority": 1020,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "[concat(variables('startPort'), '-', variables('finalPort'))]",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-internal-traffic",
            "properties": {
              "priority": 1030,
              "sourceAddressPrefix": "VirtualNetwork",
              "protocol": "Tcp",
              "destinationPortRange": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "VirtualNetwork"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-01-01",
      "name": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('headnodeMachineName'), variables('publicIpConfigPostfix'))]",
            "properties": {
              "subnet": {
                "id": "[variables('subnet')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "name": "[variables('headnodeMachineName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "plan": "[if(empty(parameters('imageId')), variables('plan') , null())]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "osProfile": {
          "computerName": "[variables('headnodeMachineName')]",
          "AdminUsername": "[parameters('adminUsername')]",
          "AdminPassword": "[parameters('AdminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": true
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('headNodeVmSize')]"
        },
        "storageProfile": "[if(greater(parameters('databaseVolumeSize'), 0), variables('storageProfileWithDataDisk'), variables('storageProfileWithoutDataDisk'))]",
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]"
            }
          ]
        },
        "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersHeadnode'), '\n'), '\n$Env:AZURE_STORAGE_KEY=\"', listKeys(variables('storageAccountName'), '2022-09-01').keys[0].value, '\"', '\n$Env:HeadnodeHostname=\"', reference(variables('headnodeIPName')).dnsSettings.fqdn, '\"')))]"
      },
      "resources": [
        {
          "type": "extensions",
          "apiVersion": "2023-03-01",
          "name": "startup",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
          ],
          "tags": {
            "displayName": "startup"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.10",
            "autoUpgradeMinorVersion": true,
            "protectedSettings": {
              "commandToExecute": "powershell.exe -Command \"$UserData = [scriptblock]::Create([System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((Invoke-RestMethod -Headers @{'Metadata'='true'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text')))); Invoke-Command -ScriptBlock $UserData\""
            }
          }
        }
      ]
    },
    {
      "condition": "[variables('roleDeploymentCondition')]",
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-04-01",
      "name": "[variables('clusterManagerRoleName')]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "assignableScopes": [
          "[resourceGroup().id]"
        ],
        "description": "Grants access to manage VMSS and VMs.",
        "permissions": [
          {
            "actions": "[union(variables('headnodeManagementPermissions'), variables('vmssManagementPermissions'))]"
          }
        ],
        "roleName": "[concat('Cluster Orchestrator - ', resourceGroup().name)]",
        "type": "customRole"
      }
    },
    {
      "condition": "[variables('roleDeploymentCondition')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'headnode-role')]",
      "dependsOn": [
        "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('clusterManagerRoleName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('clusterManagerRoleName'))]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName')), '2022-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2022-08-01",
      "name": "[variables('vmssName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses/', variables('headnodeIPName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "tags": "[union(variables('tagsForAll'), variables('tagsForVMSS'))]",
      "sku": {
        "name": "[parameters('workerVmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('numWorkerNodes')]"
      },
      "plan": "[if(empty(parameters('imageId')), variables('plan') , null())]",
      "properties": {
        "overprovision": false,
        "upgradepolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), bool('true'), json('null'))]",
        "virtualMachineProfile": {
          "priority": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), 'Spot', 'Regular')]",
          "evictionPolicy": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), 'Delete', json('null'))]",
          "billingProfile": {
            "maxPrice": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), -1, json('null'))]"
          },
          "scheduledEventsProfile": {
            "terminateNotificationProfile": {
              "enable": true
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('vmssName')]",
            "AdminUsername": "[parameters('adminUsername')]",
            "AdminPassword": "[parameters('AdminPassword')]",
            "windowsConfiguration": {
              "provisionVmAgent": true
            }
          },
          "storageProfile": "[variables('storageProfileWithoutDataDisk')]",
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat(variables('vmssName'), variables('networkInterfacePostfix'))]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('vmssName'), variables('publicIpConfigPostfix'))]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnet')]"
                        },
                        "publicIpAddressConfiguration": {
                          "name": "[variables('publicIpPostfix')]",
                          "properties": {
                            "dnsSettings": {
                              "domainNameLabel": "[concat(variables('vmssName'), variables('dnsLabelPrefix'))]"
                            },
                            "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
                          }
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
          "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersWorker'), '\n'), '\n$Env:AZURE_STORAGE_KEY=\"', listKeys(variables('storageAccountName'), '2022-09-01').keys[0].value, '\"', '\n$Env:HeadnodeHostname=\"', reference(variables('headnodeIPName')).dnsSettings.fqdn, '\"', '\n$Env:HeadnodeLocalIP=\"', reference(variables('privateIPAddressForNodes')).ipConfigurations[0].properties.privateIPAddress, '\"')))]",
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(variables('vmssName'), '-installation')]",
                "properties": {
                  "publisher": "Microsoft.Compute",
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.10",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "commandToExecute": "powershell.exe -Command \"$UserData = [scriptblock]::Create([System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((Invoke-RestMethod -Headers @{'Metadata'='true'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text')))); Invoke-Command -ScriptBlock $UserData\""
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    }
  ],
  "outputs": {
    "virtualNetworkResourceID": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
    }
  }
}